export const VISIT_PROPS: Record<string, string[]> = {
  Program: ["body"],
  // Function: ["id", "params", "body"],  -> interface
  ExpressionStatement: ["expression"],
  BlockStatement: ["body"],
  WithStatement: ["object", "body"],
  ReturnStatement: ["argument"],
  LabeledStatement: ["label", "body"],
  BreakStatement: ["label"],
  ContinueStatement: ["label"],
  IfStatement: ["test", "consequent", "alternate"],
  SwitchStatement: ["discriminant", "cases"],
  SwitchCase: ["test", "consequent"],
  ThrowStatement: ["argument"],
  TryStatement: ["block", "handler", "finalizer"],
  CatchClause: ["param", "body"],
  WhileStatement: ["test", "body"],
  DoWhileStatement: ["body", "test"],
  ForStatement: ["init", "test", "update", "body"],
  ForInStatement: ["left", "right", "body"],
  ForOfStatement: ["left", "right", "body"],
  FunctionDeclaration: ["id", "params", "body"],
  VariableDeclaration: ["declarations"],
  VariableDeclarator: ["id", "init"],
  ArrayExpression: ["elements"],
  ObjectExpression: ["properties"],
  Property: ["key", "value"],
  FunctionExpression: ["id", "params", "body"],
  UnaryExpression: ["argument"],
  UpdateExpression: ["argument"],
  BinaryExpression: ["left", "right"],
  AssignmentExpression: ["left", "right"],
  LogicalExpression: ["left", "right"],
  MemberExpression: ["object", "property"],
  ConditionalExpression: ["test", "consequent", "alternate"],
  CallExpression: ["callee", "arguments"],
  NewExpression: ["callee", "arguments"],
  SequenceExpression: ["expressions"],
  SpreadElement: ["argument"],
  YieldExpression: ["argument"],
  TemplateLiteral: ["quasis", "expressions"],
  TaggedTemplateExpression: ["tag", "quasi"],
  // AssignmentProperty: ["key", "value"],  -> Property with kind="init" and method=false
  ObjectPattern: ["properties"],
  ArrayPattern: ["elements"],
  RestElement: ["argument"],
  AssignmentPattern: ["left", "right"],
  // Class: ["id", "superClass", "body"],  -> interface
  ClassBody: ["body"],
  MethodDefinition: ["key", "value"],
  ClassDeclaration: ["id", "superClass", "body"],
  ClassExpression: ["id", "superClass", "body"],
  MetaProperty: ["meta", "property"],
  ImportDeclaration: ["specifiers", "source"],
  ImportSpecifier: ["imported", "local"],
  ImportDefaultSpecifier: ["local"],
  ImportNamespaceSpecifier: ["local"],
  ExportNamedDeclaration: ["declaration", "specifiers", "source"],
  ExportSpecifier: ["exported", "local"],
  // AnonymousFunctionDeclaration: ["params", "body"],  -> FunctionDeclaration with id=null
  // AnonymousClassDeclaration: ["superClass", "body"],  -> ClassDeclaration with id=null
  ExportDefaultDeclaration: ["declaration"],
  ExportAllDeclaration: ["source", "exported"],
  AwaitExpression: ["argument"],
  ChainExpression: ["expression"],
  ImportExpression: ["source"],
  ParenthesizedExpression: ["expression"],
  PropertyDefinition: ["key", "value"],
  StaticBlock: ["body"],
};
